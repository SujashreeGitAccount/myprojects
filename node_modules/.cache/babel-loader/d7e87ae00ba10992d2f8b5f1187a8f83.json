{"ast":null,"code":"var _jsxFileName = \"E:\\\\login\\\\src\\\\components\\\\Dashboard.tsx\";\nimport { createStyles, Paper, Table, TableBody, TableCell, TableHead, TableRow, withStyles } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n//import FetchTableData from './FetchTableData';\n// util to make fake data object\nlet id = 0;\n\nconst createData = (name, calories, fat, carbs, protein) => {\n  id += 1;\n  return {\n    id,\n    name,\n    calories,\n    fat,\n    carbs,\n    protein\n  };\n}; //Request.get('http://dummy.restapiexample.com/api/v1/employees', (response: any) => {\n//    console.log(response);\n//});\n//const response = fetch('http://dummy.restapiexample.com/api/v1/employees');\n//const data = response.json();\n\n\nfunction FetchTableData() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [post, setPost] = useState({});\n  useEffect(() => {\n    axios.get('http://dummy.restapiexample.com/api/v1/employees').then(response => {\n      setLoading(false);\n      setPost(response.data);\n      setError('');\n    }).catch(error => {\n      setLoading(false);\n      setPost({});\n      setError('Something went wrong');\n    });\n  }, []);\n} // make an array of fake data\n\n\nconst rows = [createData('Frozen yoghurt', 159, 6.0, 24, 4.0), createData('Ice cream sandwich', 237, 9.0, 37, 4.3), createData('Eclair', 262, 16.0, 24, 6.0), createData('Cupcake', 305, 3.7, 67, 4.3), createData('Gingerbread', 356, 16.0, 49, 3.9)]; // create a styles object using a theme. The createStyles function is\n// needed to placate the TS compiler.\n\nconst styles = theme => createStyles({\n  root: {\n    width: '100%',\n    marginTop: 3,\n    overflowX: 'auto'\n  },\n  table: {\n    minWidth: 700\n  }\n}); // declare props as an extension of the interface we just defined in the 'styles' variable. Any\n// other props can appear here. I've put one in as an example of how to use it.\n\n\n// Here's the component, a stateless functional component that expects to receive props that match\n// the 'Props' interface. Since it is an SFC we don't write 'this.props', it is just 'props'.\nconst Dashboard = props => {\n  const {\n    classes\n  } = props;\n  return (\n    /*#__PURE__*/\n    //<FetchTableData />\n    React.createElement(Paper, {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, \"Example use of props: \", props.hi), /*#__PURE__*/React.createElement(Table, {\n      className: classes.table,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }, \"Id\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }, \"Employee Name\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }, \"Salary\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    }, \"Age\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }\n    }, \"Protein (g)\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, rows.map(row => {\n      return /*#__PURE__*/React.createElement(TableRow, {\n        key: row.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        component: \"th\",\n        scope: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 33\n        }\n      }, row.name), /*#__PURE__*/React.createElement(TableCell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 33\n        }\n      }, row.calories), /*#__PURE__*/React.createElement(TableCell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 33\n        }\n      }, row.fat), /*#__PURE__*/React.createElement(TableCell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 33\n        }\n      }, row.carbs), /*#__PURE__*/React.createElement(TableCell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 33\n        }\n      }, row.protein));\n    }))))\n  );\n}; // instrument the component with the CSS styles defined above, and export it.\n\n\nexport default withStyles(styles)(Dashboard);","map":{"version":3,"sources":["E:/login/src/components/Dashboard.tsx"],"names":["createStyles","Paper","Table","TableBody","TableCell","TableHead","TableRow","withStyles","React","useState","useEffect","axios","id","createData","name","calories","fat","carbs","protein","FetchTableData","loading","setLoading","error","setError","post","setPost","get","then","response","data","catch","rows","styles","theme","root","width","marginTop","overflowX","table","minWidth","Dashboard","props","classes","hi","map","row"],"mappings":"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","sourcesContent":["import {\r\n    createStyles,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Theme,\r\n    withStyles,\r\n    WithStyles,\r\n} from '@material-ui/core';\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport * as Request from 'request';\r\n//import FetchTableData from './FetchTableData';\r\n\r\n// util to make fake data object\r\nlet id = 0;\r\nconst createData = (name: string, calories: number, fat: number, carbs: number, protein: number) => {\r\n    id += 1;\r\n    return { id, name, calories, fat, carbs, protein };\r\n};\r\n\r\n\r\n\r\n//Request.get('http://dummy.restapiexample.com/api/v1/employees', (response: any) => {\r\n//    console.log(response);\r\n//});\r\n//const response = fetch('http://dummy.restapiexample.com/api/v1/employees');\r\n//const data = response.json();\r\n\r\n\r\nfunction FetchTableData() {\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState('');\r\n    const [post, setPost] = useState({});\r\n\r\n    useEffect(() => {\r\n        axios.get('http://dummy.restapiexample.com/api/v1/employees')\r\n            .then(response => {\r\n                setLoading(false)\r\n                setPost(response.data)\r\n                setError('')\r\n            })\r\n            .catch(error => {\r\n                setLoading(false)\r\n                setPost({})\r\n                setError('Something went wrong')\r\n            })\r\n    }, [])\r\n}\r\n// make an array of fake data\r\nconst rows = [\r\n    createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n    createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n    createData('Eclair', 262, 16.0, 24, 6.0),\r\n    createData('Cupcake', 305, 3.7, 67, 4.3),\r\n    createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\n// create a styles object using a theme. The createStyles function is\r\n// needed to placate the TS compiler.\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            marginTop: 3,\r\n            overflowX: 'auto',\r\n        },\r\n        table: {\r\n            minWidth: 700,\r\n        },\r\n    });\r\n\r\n// declare props as an extension of the interface we just defined in the 'styles' variable. Any\r\n// other props can appear here. I've put one in as an example of how to use it.\r\ninterface Props extends WithStyles<typeof styles> {\r\n    hi: string;\r\n}\r\n\r\n// Here's the component, a stateless functional component that expects to receive props that match\r\n// the 'Props' interface. Since it is an SFC we don't write 'this.props', it is just 'props'.\r\nconst Dashboard: React.SFC<Props> = props => {\r\n    const { classes } = props;\r\n\r\n    return (\r\n        //<FetchTableData />\r\n\r\n        <Paper className={classes.root}>\r\n            <p>Example use of props: {props.hi}</p>\r\n            <Table className={classes.table}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Id</TableCell>\r\n                        <TableCell>Employee Name</TableCell>\r\n                        <TableCell>Salary</TableCell>\r\n                        <TableCell>Age</TableCell>\r\n                        <TableCell>Protein (g)</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map(row => {\r\n                        return (\r\n                            <TableRow key={row.id}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {row.name}\r\n                                </TableCell>\r\n                                <TableCell>{row.calories}</TableCell>\r\n                                <TableCell>{row.fat}</TableCell>\r\n                                <TableCell>{row.carbs}</TableCell>\r\n                                <TableCell>{row.protein}</TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper>\r\n    );\r\n};\r\n\r\n// instrument the component with the CSS styles defined above, and export it.\r\nexport default withStyles(styles)(Dashboard);"]},"metadata":{},"sourceType":"module"}